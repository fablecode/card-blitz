# Define the name of the pipeline
name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(GitVersion.SemVer)

# Define the trigger for the pipeline
trigger:
  branches:
    include:
      - main
      - feature/*
      - features/*
      - bugfix/*
      - bugfixes/*
      - doc/*
      - docs/*
      - refactor/*
      - chore/*
      - chores/*
      - test/*
      - fix/*
  paths:
    exclude:
    - README.md

pool:
  vmImage: ubuntu-latest

workspace:
  clean: all # what to clean up before the job runs

# Define variables used throughout the pipeline
variables:
  System.Debug: true
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- checkout: self
  clean: true
  fetchDepth: 0 # Disable shallow fetch

# Step 1: Install the specified .NET SDK version
- task: UseDotNet@2
  displayName: 'Use DotNet SDK 8.x'
  inputs:
    version: '8.x'                # Specify the .NET SDK version to install (e.g., .NET 8.x).


# Step 2: Install the latest GitVersion global tool
- task: gitversion/setup@3
  displayName: Install GitVersion
  inputs:
    versionSpec: '6.x'
    ignoreFailedSources: true
    preferLatestVersion: true

# Step 3: Generate Semantic Version
# - script: dotnet-gitversion /output buildserver /verbosity diagnostic
#   displayName: 'Run Debug GitVersion'
- task: gitversion/execute@3
  displayName: 'Run GitVersion'
  inputs:
      updateAssemblyInfo: true

# Step 4: Restore NuGet packages
- script: |
    dotnet restore
  displayName: 'Restore NuGet Packages'

# Step 5: Build the project targeting multiple frameworks
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your needs

# Step 6: Run NUnit tests with Coverlet for code coverage
- task: DotNetCoreCLI@2
  displayName: 'Run Tests and Collect Code Coverage'
  inputs:
    command: 'test'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura'
    publishTestResults: true
    projects: '$(solution)' # update with your test project directory

# Step 7: Publish Code Coverage
- task: PublishCodeCoverageResults@2
  displayName: 'Publish code coverage report'
  inputs:
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

# Step 8: Create a NuGet package from the project
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/CardBlitz.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.FullSemVer'  # Use the version generated by GitVersion
    configuration: $(buildConfiguration)
    outputDir: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Create NuGet Package'

# Step 9: Publish the NuGet package to Azure Artifacts
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'  # Path to the package
    artifactName: 'nuget-package'  # Name of the artifact to publish
    publishLocation: 'pipeline'  # Publish location (pipeline scope)
  displayName: 'Publish Artifacts'

# Step 10: Publish the NuGet server
# - task: DotNetCoreCLI@2
#   displayName: 'Publish to Internal NuGET Feed'
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: '33deeca4-f254-4df3-9e74-83682799b1dd'
